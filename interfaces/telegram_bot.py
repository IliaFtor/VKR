import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from core.lecture_pipeline import run_lecture_pipeline
from utils.file_manager import create_temp_file

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéì –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —è —Å–¥–µ–ª–∞—é –∫–æ–Ω—Å–ø–µ–∫—Ç –ª–µ–∫—Ü–∏–∏!"
    )

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    await context.bot.send_chat_action(chat_id=message.chat_id, action="typing")

    temp_path = create_temp_file()
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
        voice_file = await message.voice.get_file()
        await voice_file.download_to_drive(temp_path)

        # –ó–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º event loop)
        loop = asyncio.get_event_loop()
        summary = await loop.run_in_executor(None, run_lecture_pipeline, str(message.from_user.id), temp_path)

        await message.reply_text(f"**–ö–æ–Ω—Å–ø–µ–∫—Ç –ª–µ–∫—Ü–∏–∏:**\n\n{summary}", parse_mode="Markdown")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
        print(error_msg)
        await message.reply_text(error_msg)